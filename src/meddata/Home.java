/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package meddata;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Locale;
import javax.swing.JOptionPane;


/**
 *
 * @author lk0
 */
public class Home extends javax.swing.JFrame {

    private Patient currentPatient;
    private Appointment currentAppointment;
    private Visit currentVisit;
    private MedData data = loadMedData.get();
    private ArrayList<Patient> currentPatientList = new ArrayList();
    private ArrayList<Appointment> currentAppointmentList = new ArrayList();
    private ArrayList<Visit> currentVisitList = new ArrayList();
    private ArrayList<String> doctors = data.getDoctors();
    private ArrayList<Calendar> availableTimes = new ArrayList();
    private ArrayList<Integer> unavailableTimes = new ArrayList();
    private boolean modifyAppointment = false;

    /**
     * Creates new form Home
     */
    public Home() {
        initComponents();
        male.setSelected(true);
        for (String d : doctors) {
            doctorList.add(d);
        }
    }

    private void updateTodaysAppointments() {
        inProgressList.removeAll();
        todaysAppointmentList.removeAll();
        for (Appointment a : data.getAppointmentsForDay(Calendar.getInstance())) {
            todaysAppointmentList.add(a.getPatientName() + " " + (a.getTime().get(Calendar.MONTH) + 1) + "/"
                    + a.getTime().get(Calendar.DAY_OF_MONTH) + "/" + a.getTime().get(Calendar.YEAR) + " "
                    + (a.getTime().get(Calendar.HOUR_OF_DAY) * 100 + a.getTime().get(Calendar.MINUTE)));
        }
        for (Visit v : data.getCheckedIn()) {
            inProgressList.add(v.getPatientName() + " ");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        ModifyPatientFrame = new javax.swing.JFrame();
        modifyPatientPanel1 = new javax.swing.JPanel();
        jLabel14 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        firstName1 = new javax.swing.JTextField();
        lastName1 = new javax.swing.JTextField();
        jLabel19 = new javax.swing.JLabel();
        address1 = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        telephoneNumber1 = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        emergencyContact1 = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        eMailAddress1 = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        male1 = new javax.swing.JCheckBox();
        female1 = new javax.swing.JCheckBox();
        jLabel24 = new javax.swing.JLabel();
        socialSecurityNumber1 = new javax.swing.JTextField();
        jLabel25 = new javax.swing.JLabel();
        married1 = new javax.swing.JCheckBox();
        jLabel26 = new javax.swing.JLabel();
        insuranceName1 = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        insurancePolicy1 = new javax.swing.JTextField();
        jLabel28 = new javax.swing.JLabel();
        insuranceCoPay1 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        medicalBackground1 = new javax.swing.JTextArea();
        modifyPatientDone = new javax.swing.JButton();
        modifyPatientCancel = new javax.swing.JButton();
        updateAccountFrame = new javax.swing.JFrame();
        accountHoldersName = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        currentBalance = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        amountInput = new javax.swing.JTextField();
        accountUpdateSubmit = new javax.swing.JButton();
        addAppointmentFrame = new javax.swing.JFrame();
        appointmentPatientName = new javax.swing.JLabel();
        jLabel31 = new javax.swing.JLabel();
        reasonForVisitField = new javax.swing.JTextField();
        jLabel32 = new javax.swing.JLabel();
        appointmentDoctorList = new java.awt.List();
        dateChooserPanel1 = new datechooser.beans.DateChooserPanel();
        availableTimesList = new java.awt.List();
        appointmentDoneButton = new javax.swing.JButton();
        appointmentCancelButton = new javax.swing.JButton();
        jLabel34 = new javax.swing.JLabel();
        displayHistoryFrame = new javax.swing.JFrame();
        historyVisitList = new java.awt.List();
        historyPatientName = new javax.swing.JLabel();
        historyDisplayButton = new javax.swing.JButton();
        historyDoneButton = new javax.swing.JButton();
        walkInFrame = new javax.swing.JFrame();
        jLabel41 = new javax.swing.JLabel();
        walkInReasonForVisitTextField = new javax.swing.JTextField();
        walkInDoctorList = new java.awt.List();
        jLabel42 = new javax.swing.JLabel();
        walkInCheckInButton = new javax.swing.JButton();
        walkInCancelButton = new javax.swing.JButton();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        addPatientPanel = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        firstName = new javax.swing.JTextField();
        lastName = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        address = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        telephoneNumber = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        emergencyContact = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        eMailAddress = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        male = new javax.swing.JCheckBox();
        female = new javax.swing.JCheckBox();
        jLabel7 = new javax.swing.JLabel();
        socialSecurityNumber = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        married = new javax.swing.JCheckBox();
        jLabel9 = new javax.swing.JLabel();
        insuranceName = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        insurancePolicy = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        insuranceCoPay = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        medicalBackground = new javax.swing.JTextArea();
        addPatientDone = new javax.swing.JButton();
        addPatientCancel = new javax.swing.JButton();
        modifyPatientInfo = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        searchResults = new java.awt.List();
        searchField = new javax.swing.JTextField();
        modifyInfoButton = new javax.swing.JButton();
        displayHistoryButton = new javax.swing.JButton();
        updateAccountButton = new javax.swing.JButton();
        addAppointmentButton = new javax.swing.JButton();
        walkInButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        viewAppointmentList = new java.awt.List();
        viewAppointmentCalendar = new datechooser.beans.DateChooserPanel();
        viewAppointmentName = new javax.swing.JLabel();
        viewAppointmentDoctor = new javax.swing.JLabel();
        viewAppointmentReason = new javax.swing.JLabel();
        viewAppointmentContact = new javax.swing.JLabel();
        viewAppointmentsDelteButton = new javax.swing.JToggleButton();
        viewAppointmentsModifyButton = new javax.swing.JToggleButton();
        jPanel4 = new javax.swing.JPanel();
        jLabel35 = new javax.swing.JLabel();
        findAppointmentNameField = new javax.swing.JTextField();
        findAppointmentResultList = new java.awt.List();
        findAppointmentModifyButton = new javax.swing.JToggleButton();
        findAppointmentDeleteButton = new javax.swing.JToggleButton();
        findAppointmentName = new javax.swing.JLabel();
        findAppointmentContact = new javax.swing.JLabel();
        viewAppointmentDoctor1 = new javax.swing.JLabel();
        viewAppointmentReason1 = new javax.swing.JLabel();
        findAppointmentDateTime = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jLabel36 = new javax.swing.JLabel();
        todaysAppointmentList = new java.awt.List();
        checkInButton = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        inProgressList = new java.awt.List();
        jLabel37 = new javax.swing.JLabel();
        checkOutButton = new javax.swing.JToggleButton();
        jLabel38 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        diagnosisTextField = new javax.swing.JTextArea();
        jLabel39 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        recommendationTextField = new javax.swing.JTextArea();
        jLabel40 = new javax.swing.JLabel();
        costTextField = new javax.swing.JTextField();
        checkOutPatientLabel = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jLabel33 = new javax.swing.JLabel();
        doctorList = new java.awt.List();
        removeDoctorButton = new javax.swing.JButton();
        addDoctorField = new javax.swing.JTextField();
        addDoctorButton = new javax.swing.JButton();

        ModifyPatientFrame.setAlwaysOnTop(true);
        ModifyPatientFrame.setMinimumSize(new java.awt.Dimension(672, 672));

        jLabel14.setText("Background and Comments");

        jLabel17.setText("First name");

        jLabel18.setText("Last name");

        jLabel19.setText("Address");

        jLabel20.setText("Telephone Number");

        jLabel21.setText("Emergency Contact");

        jLabel22.setText("E-Mail Address");

        jLabel23.setText("sex");

        male1.setText("Male");
        male1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                male1ActionPerformed(evt);
            }
        });

        female1.setText("Female");
        female1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                female1ActionPerformed(evt);
            }
        });

        jLabel24.setText("Social Security Number");

        jLabel25.setText("Marital Status");

        married1.setText("Married");
        married1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                married1ActionPerformed(evt);
            }
        });

        jLabel26.setText("Insurance name");

        jLabel27.setText("Insurance Policy #");

        jLabel28.setText("Co-Pay");

        medicalBackground1.setColumns(20);
        medicalBackground1.setRows(5);
        jScrollPane2.setViewportView(medicalBackground1);

        modifyPatientDone.setText("Done");
        modifyPatientDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyPatientDoneActionPerformed(evt);
            }
        });

        modifyPatientCancel.setText("Cancel");
        modifyPatientCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyPatientCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout modifyPatientPanel1Layout = new javax.swing.GroupLayout(modifyPatientPanel1);
        modifyPatientPanel1.setLayout(modifyPatientPanel1Layout);
        modifyPatientPanel1Layout.setHorizontalGroup(
            modifyPatientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modifyPatientPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(modifyPatientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(modifyPatientPanel1Layout.createSequentialGroup()
                        .addGroup(modifyPatientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(modifyPatientPanel1Layout.createSequentialGroup()
                                .addComponent(modifyPatientDone, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(modifyPatientCancel))
                            .addGroup(modifyPatientPanel1Layout.createSequentialGroup()
                                .addGroup(modifyPatientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(firstName1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel17))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(modifyPatientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel18)
                                    .addComponent(lastName1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                        .addGroup(modifyPatientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, modifyPatientPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel14)
                                .addGap(144, 144, 144))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, modifyPatientPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))
                    .addGroup(modifyPatientPanel1Layout.createSequentialGroup()
                        .addGroup(modifyPatientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(modifyPatientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(insurancePolicy1, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(modifyPatientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(modifyPatientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(insuranceName1, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(modifyPatientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(married1)
                                            .addGroup(modifyPatientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(socialSecurityNumber1, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(modifyPatientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(modifyPatientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addComponent(eMailAddress1, javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(modifyPatientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(jLabel19)
                                                            .addComponent(jLabel22)
                                                            .addGroup(modifyPatientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, modifyPatientPanel1Layout.createSequentialGroup()
                                                                    .addComponent(jLabel20)
                                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                    .addComponent(jLabel21))
                                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, modifyPatientPanel1Layout.createSequentialGroup()
                                                                    .addComponent(telephoneNumber1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                    .addGap(18, 18, 18)
                                                                    .addComponent(emergencyContact1, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                            .addComponent(address1, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                    .addComponent(jLabel23)
                                                    .addGroup(modifyPatientPanel1Layout.createSequentialGroup()
                                                        .addComponent(male1)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(female1))
                                                    .addComponent(jLabel24)))
                                            .addComponent(jLabel25)
                                            .addComponent(jLabel26)))
                                    .addComponent(jLabel27)))
                            .addComponent(jLabel28)
                            .addComponent(insuranceCoPay1, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        modifyPatientPanel1Layout.setVerticalGroup(
            modifyPatientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modifyPatientPanel1Layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(modifyPatientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(jLabel17)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(modifyPatientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(modifyPatientPanel1Layout.createSequentialGroup()
                        .addGroup(modifyPatientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(firstName1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lastName1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel19)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(address1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(modifyPatientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel20)
                            .addComponent(jLabel21))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(modifyPatientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(telephoneNumber1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(emergencyContact1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel22)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(eMailAddress1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel23)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(modifyPatientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(male1)
                            .addComponent(female1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel24)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(socialSecurityNumber1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel25)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(married1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel26)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(insuranceName1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel27)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(insurancePolicy1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel28)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(insuranceCoPay1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                        .addGroup(modifyPatientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(modifyPatientDone)
                            .addComponent(modifyPatientCancel)))
                    .addComponent(jScrollPane2))
                .addContainerGap())
        );

        javax.swing.GroupLayout ModifyPatientFrameLayout = new javax.swing.GroupLayout(ModifyPatientFrame.getContentPane());
        ModifyPatientFrame.getContentPane().setLayout(ModifyPatientFrameLayout);
        ModifyPatientFrameLayout.setHorizontalGroup(
            ModifyPatientFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 672, Short.MAX_VALUE)
            .addGroup(ModifyPatientFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(ModifyPatientFrameLayout.createSequentialGroup()
                    .addGap(0, 45, Short.MAX_VALUE)
                    .addComponent(modifyPatientPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 46, Short.MAX_VALUE)))
        );
        ModifyPatientFrameLayout.setVerticalGroup(
            ModifyPatientFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 553, Short.MAX_VALUE)
            .addGroup(ModifyPatientFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(ModifyPatientFrameLayout.createSequentialGroup()
                    .addGap(0, 7, Short.MAX_VALUE)
                    .addComponent(modifyPatientPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 7, Short.MAX_VALUE)))
        );

        updateAccountFrame.setAlwaysOnTop(true);
        updateAccountFrame.setMinimumSize(new java.awt.Dimension(300, 200));

        accountHoldersName.setText("jLabel29");

        jLabel29.setText("Current Balance:");

        currentBalance.setText("jLabel30");

        jLabel30.setText("Payment amount:");

        accountUpdateSubmit.setText("Submit");
        accountUpdateSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                accountUpdateSubmitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout updateAccountFrameLayout = new javax.swing.GroupLayout(updateAccountFrame.getContentPane());
        updateAccountFrame.getContentPane().setLayout(updateAccountFrameLayout);
        updateAccountFrameLayout.setHorizontalGroup(
            updateAccountFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(updateAccountFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(updateAccountFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(accountHoldersName)
                    .addGroup(updateAccountFrameLayout.createSequentialGroup()
                        .addComponent(jLabel29)
                        .addGap(18, 18, 18)
                        .addComponent(currentBalance))
                    .addGroup(updateAccountFrameLayout.createSequentialGroup()
                        .addComponent(jLabel30)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(amountInput, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(accountUpdateSubmit)
                .addContainerGap(12, Short.MAX_VALUE))
        );
        updateAccountFrameLayout.setVerticalGroup(
            updateAccountFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(updateAccountFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(accountHoldersName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(updateAccountFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(currentBalance))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(updateAccountFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(amountInput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(accountUpdateSubmit))
                .addContainerGap(42, Short.MAX_VALUE))
        );

        addAppointmentFrame.setAlwaysOnTop(true);
        addAppointmentFrame.setMinimumSize(new java.awt.Dimension(664, 533));

        appointmentPatientName.setText("jLabel31");

        jLabel31.setText("Reason For Visit");

        jLabel32.setText("Doctor");

        dateChooserPanel1.setNavigateFont(new java.awt.Font("Serif", java.awt.Font.PLAIN, 11));
        dateChooserPanel1.addCommitListener(new datechooser.events.CommitListener() {
            public void onCommit(datechooser.events.CommitEvent evt) {
                dateChooserPanel1OnCommit(evt);
            }
        });
        dateChooserPanel1.addSelectionChangedListener(new datechooser.events.SelectionChangedListener() {
            public void onSelectionChange(datechooser.events.SelectionChangedEvent evt) {
                dateChooserPanel1OnSelectionChange(evt);
            }
        });

        appointmentDoneButton.setText("Done");
        appointmentDoneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appointmentDoneButtonActionPerformed(evt);
            }
        });

        appointmentCancelButton.setText("Cancel");
        appointmentCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appointmentCancelButtonActionPerformed(evt);
            }
        });

        jLabel34.setText("Available Times:");

        javax.swing.GroupLayout addAppointmentFrameLayout = new javax.swing.GroupLayout(addAppointmentFrame.getContentPane());
        addAppointmentFrame.getContentPane().setLayout(addAppointmentFrameLayout);
        addAppointmentFrameLayout.setHorizontalGroup(
            addAppointmentFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addAppointmentFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addAppointmentFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(reasonForVisitField)
                    .addComponent(appointmentPatientName)
                    .addComponent(jLabel31)
                    .addComponent(jLabel32)
                    .addGroup(addAppointmentFrameLayout.createSequentialGroup()
                        .addComponent(appointmentDoctorList, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(70, 70, 70)
                        .addComponent(appointmentDoneButton)
                        .addGap(18, 18, 18)
                        .addComponent(appointmentCancelButton))
                    .addGroup(addAppointmentFrameLayout.createSequentialGroup()
                        .addComponent(dateChooserPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 326, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addAppointmentFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(availableTimesList, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel34))))
                .addContainerGap(190, Short.MAX_VALUE))
        );
        addAppointmentFrameLayout.setVerticalGroup(
            addAppointmentFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addAppointmentFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(appointmentPatientName)
                .addGap(18, 18, 18)
                .addComponent(jLabel31)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(reasonForVisitField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel32)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addAppointmentFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(appointmentDoctorList, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(addAppointmentFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(appointmentDoneButton)
                        .addComponent(appointmentCancelButton)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addAppointmentFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addAppointmentFrameLayout.createSequentialGroup()
                        .addComponent(jLabel34)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(availableTimesList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(dateChooserPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE))
                .addContainerGap())
        );

        displayHistoryFrame.setMinimumSize(new java.awt.Dimension(435, 496));

        historyPatientName.setText("jLabel35");

        historyDisplayButton.setText("Display");

        historyDoneButton.setText("Done");

        javax.swing.GroupLayout displayHistoryFrameLayout = new javax.swing.GroupLayout(displayHistoryFrame.getContentPane());
        displayHistoryFrame.getContentPane().setLayout(displayHistoryFrameLayout);
        displayHistoryFrameLayout.setHorizontalGroup(
            displayHistoryFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayHistoryFrameLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(displayHistoryFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(historyPatientName)
                    .addGroup(displayHistoryFrameLayout.createSequentialGroup()
                        .addComponent(historyVisitList, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(displayHistoryFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(historyDisplayButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(historyDoneButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(26, Short.MAX_VALUE))
        );
        displayHistoryFrameLayout.setVerticalGroup(
            displayHistoryFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayHistoryFrameLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(historyPatientName)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(displayHistoryFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(historyVisitList, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(displayHistoryFrameLayout.createSequentialGroup()
                        .addComponent(historyDisplayButton)
                        .addGap(18, 18, 18)
                        .addComponent(historyDoneButton)))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        walkInFrame.setAlwaysOnTop(true);
        walkInFrame.setMinimumSize(new java.awt.Dimension(400, 300));

        jLabel41.setText("Reason For Visit");

        jLabel42.setText("Doctor");

        walkInCheckInButton.setText("Check-In");
        walkInCheckInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                walkInCheckInButtonActionPerformed(evt);
            }
        });

        walkInCancelButton.setText("Cancel");
        walkInCancelButton.setMinimumSize(new java.awt.Dimension(400, 300));
        walkInCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                walkInCancelButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout walkInFrameLayout = new javax.swing.GroupLayout(walkInFrame.getContentPane());
        walkInFrame.getContentPane().setLayout(walkInFrameLayout);
        walkInFrameLayout.setHorizontalGroup(
            walkInFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(walkInFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(walkInFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(walkInReasonForVisitTextField)
                    .addGroup(walkInFrameLayout.createSequentialGroup()
                        .addGroup(walkInFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel41)
                            .addComponent(jLabel42)
                            .addGroup(walkInFrameLayout.createSequentialGroup()
                                .addComponent(walkInDoctorList, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(walkInCheckInButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(walkInCancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 100, Short.MAX_VALUE)))
                .addContainerGap())
        );
        walkInFrameLayout.setVerticalGroup(
            walkInFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(walkInFrameLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel41)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(walkInReasonForVisitTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel42)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(walkInFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(walkInDoctorList, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(walkInFrameLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(walkInCheckInButton)
                        .addComponent(walkInCancelButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(19, Short.MAX_VALUE))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jTabbedPane1StateChanged(evt);
            }
        });
        jTabbedPane1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTabbedPane1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTabbedPane1FocusLost(evt);
            }
        });
        jTabbedPane1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTabbedPane1MouseClicked(evt);
            }
        });

        jLabel13.setText("Background and Comments");

        jLabel1.setText("First name");

        jLabel2.setText("Last name");

        jLabel3.setText("Address");

        jLabel4.setText("Telephone Number");

        jLabel5.setText("Emergency Contact");

        jLabel11.setText("E-Mail Address");

        jLabel6.setText("sex");

        male.setText("Male");
        male.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                maleActionPerformed(evt);
            }
        });

        female.setText("Female");
        female.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                femaleActionPerformed(evt);
            }
        });

        jLabel7.setText("Social Security Number");

        jLabel8.setText("Marital Status");

        married.setText("Married");
        married.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                marriedActionPerformed(evt);
            }
        });

        jLabel9.setText("Insurance name");

        jLabel10.setText("Insurance Policy #");

        jLabel12.setText("Co-Pay");

        medicalBackground.setColumns(20);
        medicalBackground.setRows(5);
        jScrollPane1.setViewportView(medicalBackground);

        addPatientDone.setText("Done");
        addPatientDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPatientDoneActionPerformed(evt);
            }
        });

        addPatientCancel.setText("Cancel");
        addPatientCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPatientCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout addPatientPanelLayout = new javax.swing.GroupLayout(addPatientPanel);
        addPatientPanel.setLayout(addPatientPanelLayout);
        addPatientPanelLayout.setHorizontalGroup(
            addPatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addPatientPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addPatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addPatientPanelLayout.createSequentialGroup()
                        .addGroup(addPatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(addPatientPanelLayout.createSequentialGroup()
                                .addComponent(addPatientDone, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addPatientCancel))
                            .addGroup(addPatientPanelLayout.createSequentialGroup()
                                .addGroup(addPatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(firstName, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(addPatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2)
                                    .addComponent(lastName, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                        .addGroup(addPatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addPatientPanelLayout.createSequentialGroup()
                                .addComponent(jLabel13)
                                .addGap(144, 144, 144))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, addPatientPanelLayout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())))
                    .addGroup(addPatientPanelLayout.createSequentialGroup()
                        .addGroup(addPatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(addPatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(insurancePolicy, javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(addPatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(addPatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(insuranceName, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(addPatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(married)
                                            .addGroup(addPatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                .addComponent(socialSecurityNumber, javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(addPatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(addPatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                        .addComponent(eMailAddress, javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addGroup(addPatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                            .addComponent(jLabel3)
                                                            .addComponent(jLabel11)
                                                            .addGroup(addPatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addPatientPanelLayout.createSequentialGroup()
                                                                    .addComponent(jLabel4)
                                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                                    .addComponent(jLabel5))
                                                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, addPatientPanelLayout.createSequentialGroup()
                                                                    .addComponent(telephoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                    .addGap(18, 18, 18)
                                                                    .addComponent(emergencyContact, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                            .addComponent(address, javax.swing.GroupLayout.PREFERRED_SIZE, 206, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                                    .addComponent(jLabel6)
                                                    .addGroup(addPatientPanelLayout.createSequentialGroup()
                                                        .addComponent(male)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                        .addComponent(female))
                                                    .addComponent(jLabel7)))
                                            .addComponent(jLabel8)
                                            .addComponent(jLabel9)))
                                    .addComponent(jLabel10)))
                            .addComponent(jLabel12)
                            .addComponent(insuranceCoPay, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        addPatientPanelLayout.setVerticalGroup(
            addPatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addPatientPanelLayout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(addPatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addPatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addPatientPanelLayout.createSequentialGroup()
                        .addGroup(addPatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(firstName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lastName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(address, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addPatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addPatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(telephoneNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(emergencyContact, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel11)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(eMailAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(addPatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(male)
                            .addComponent(female))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(socialSecurityNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(married)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(insuranceName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(insurancePolicy, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(insuranceCoPay, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 75, Short.MAX_VALUE)
                        .addGroup(addPatientPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addPatientDone)
                            .addComponent(addPatientCancel)))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Add Patient", addPatientPanel);

        jLabel15.setText("Enter Name ");

        jLabel16.setText("Results:");

        searchResults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchResultsActionPerformed(evt);
            }
        });

        searchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchFieldActionPerformed(evt);
            }
        });
        searchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                searchFieldKeyTyped(evt);
            }
        });

        modifyInfoButton.setText("Modify Info");
        modifyInfoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                modifyInfoButtonActionPerformed(evt);
            }
        });

        displayHistoryButton.setText("Display History");
        displayHistoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                displayHistoryButtonActionPerformed(evt);
            }
        });

        updateAccountButton.setText("Update Account");
        updateAccountButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateAccountButtonActionPerformed(evt);
            }
        });

        addAppointmentButton.setText("Add Appointment");
        addAppointmentButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addAppointmentButtonActionPerformed(evt);
            }
        });

        walkInButton.setText("Walk-In");
        walkInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                walkInButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout modifyPatientInfoLayout = new javax.swing.GroupLayout(modifyPatientInfo);
        modifyPatientInfo.setLayout(modifyPatientInfoLayout);
        modifyPatientInfoLayout.setHorizontalGroup(
            modifyPatientInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modifyPatientInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(modifyPatientInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel15)
                    .addComponent(jLabel16)
                    .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchResults, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(modifyPatientInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addAppointmentButton, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                    .addComponent(displayHistoryButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(modifyInfoButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(updateAccountButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 119, Short.MAX_VALUE)
                    .addComponent(walkInButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(44, 44, 44))
        );
        modifyPatientInfoLayout.setVerticalGroup(
            modifyPatientInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(modifyPatientInfoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel15)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(searchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(jLabel16)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(modifyPatientInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(searchResults, javax.swing.GroupLayout.PREFERRED_SIZE, 328, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(modifyPatientInfoLayout.createSequentialGroup()
                        .addComponent(modifyInfoButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(displayHistoryButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(updateAccountButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addAppointmentButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(walkInButton)))
                .addContainerGap(148, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Find Patient", modifyPatientInfo);

        jPanel1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jPanel1FocusGained(evt);
            }
        });

        viewAppointmentList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAppointmentListActionPerformed(evt);
            }
        });

        viewAppointmentCalendar.addSelectionChangedListener(new datechooser.events.SelectionChangedListener() {
            public void onSelectionChange(datechooser.events.SelectionChangedEvent evt) {
                viewAppointmentCalendarOnSelectionChange(evt);
            }
        });

        viewAppointmentName.setText("Name:");

        viewAppointmentDoctor.setText("Doctor:");

        viewAppointmentReason.setText("Reason:");

        viewAppointmentContact.setText("Contact:");

        viewAppointmentsDelteButton.setText("Delete");
        viewAppointmentsDelteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAppointmentsDelteButtonActionPerformed(evt);
            }
        });

        viewAppointmentsModifyButton.setText("Modify");
        viewAppointmentsModifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewAppointmentsModifyButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(viewAppointmentList, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(viewAppointmentName)
                    .addComponent(viewAppointmentContact)
                    .addComponent(viewAppointmentReason)
                    .addComponent(viewAppointmentDoctor)
                    .addComponent(viewAppointmentsModifyButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(viewAppointmentsDelteButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 256, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(viewAppointmentCalendar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(viewAppointmentCalendar, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(viewAppointmentList, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(viewAppointmentName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewAppointmentContact)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewAppointmentDoctor)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewAppointmentReason)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(viewAppointmentsModifyButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewAppointmentsDelteButton)))
                .addContainerGap(57, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("ViewAppointments", jPanel1);

        jPanel4.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jPanel4FocusGained(evt);
            }
        });

        jLabel35.setText("Name:");

        findAppointmentNameField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                findAppointmentNameFieldKeyTyped(evt);
            }
        });

        findAppointmentResultList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findAppointmentResultListActionPerformed(evt);
            }
        });

        findAppointmentModifyButton.setText("Modify");
        findAppointmentModifyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findAppointmentModifyButtonActionPerformed(evt);
            }
        });

        findAppointmentDeleteButton.setText("Delete");
        findAppointmentDeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findAppointmentDeleteButtonActionPerformed(evt);
            }
        });

        findAppointmentName.setText("Name:");

        findAppointmentContact.setText("Contact:");

        viewAppointmentDoctor1.setText("Doctor:");

        viewAppointmentReason1.setText("Reason:");

        findAppointmentDateTime.setText("Date/Time:");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(findAppointmentModifyButton)
                        .addGap(18, 18, 18)
                        .addComponent(findAppointmentDeleteButton))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(findAppointmentResultList, javax.swing.GroupLayout.DEFAULT_SIZE, 223, Short.MAX_VALUE)
                            .addComponent(jLabel35)
                            .addComponent(findAppointmentNameField))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(findAppointmentName)
                            .addComponent(findAppointmentContact)
                            .addComponent(viewAppointmentDoctor1)
                            .addComponent(viewAppointmentReason1)
                            .addComponent(findAppointmentDateTime))))
                .addContainerGap(285, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel35)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(findAppointmentNameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(findAppointmentResultList, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(findAppointmentName)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(findAppointmentContact)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(findAppointmentDateTime)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewAppointmentDoctor1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewAppointmentReason1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(findAppointmentDeleteButton)
                    .addComponent(findAppointmentModifyButton))
                .addContainerGap(151, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Find Appointment", jPanel4);

        jLabel36.setText("Today's Appointments");

        todaysAppointmentList.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                todaysAppointmentListFocusGained(evt);
            }
        });
        todaysAppointmentList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                todaysAppointmentListActionPerformed(evt);
            }
        });

        checkInButton.setText("Check-In");
        checkInButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkInButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel36)
                    .addComponent(todaysAppointmentList, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkInButton)
                .addContainerGap(329, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel36)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(todaysAppointmentList, javax.swing.GroupLayout.PREFERRED_SIZE, 294, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(checkInButton))
                .addContainerGap(258, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Check-In Appointment", jPanel5);

        inProgressList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inProgressListActionPerformed(evt);
            }
        });

        jLabel37.setText("In-Progress");

        checkOutButton.setText("Check-Out");
        checkOutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkOutButtonActionPerformed(evt);
            }
        });

        jLabel38.setText("Diagnosis");

        diagnosisTextField.setColumns(20);
        diagnosisTextField.setRows(5);
        jScrollPane3.setViewportView(diagnosisTextField);

        jLabel39.setText("Recommendation");

        recommendationTextField.setColumns(20);
        recommendationTextField.setRows(5);
        jScrollPane4.setViewportView(recommendationTextField);

        jLabel40.setText("Cost");

        checkOutPatientLabel.setText("Patient: ");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(inProgressList, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel37))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                    .addComponent(jScrollPane4)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(checkOutPatientLabel)
                            .addComponent(jLabel38)
                            .addComponent(jLabel39)
                            .addComponent(jLabel40)
                            .addGroup(jPanel6Layout.createSequentialGroup()
                                .addComponent(costTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(checkOutButton)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel37)
                    .addComponent(checkOutPatientLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel6Layout.createSequentialGroup()
                        .addComponent(jLabel38)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel39)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel40)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(costTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(checkOutButton)))
                    .addComponent(inProgressList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(265, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Check-Out Patient", jPanel6);

        jLabel33.setText("Doctors:");

        removeDoctorButton.setText("Remove");
        removeDoctorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeDoctorButtonActionPerformed(evt);
            }
        });

        addDoctorButton.setText("Add");
        addDoctorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDoctorButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(doctorList, javax.swing.GroupLayout.DEFAULT_SIZE, 136, Short.MAX_VALUE)
                        .addComponent(jLabel33)
                        .addComponent(removeDoctorButton)
                        .addComponent(addDoctorField))
                    .addComponent(addDoctorButton))
                .addContainerGap(435, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel33)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(doctorList, javax.swing.GroupLayout.PREFERRED_SIZE, 227, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeDoctorButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(addDoctorField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addDoctorButton)
                .addContainerGap(232, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Configure", jPanel7);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 586, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(366, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 631, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void maleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_maleActionPerformed
        // TODO add your handling code here:
        if (female.isSelected()) {
            female.setSelected(false);
        }
        male.setSelected(true);
    }//GEN-LAST:event_maleActionPerformed

    private void femaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_femaleActionPerformed
        // TODO add your handling code here:
        if (male.isSelected()) {
            male.setSelected(false);
        }
        female.setSelected(true);
    }//GEN-LAST:event_femaleActionPerformed

    private void marriedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_marriedActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_marriedActionPerformed

    private void addPatientDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPatientDoneActionPerformed
        // TODO add your handling code here:
        double coPay;

        try {
            coPay = Double.parseDouble(insuranceCoPay.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(rootPane, "Invalid CoPay entry. Number required");
            return;
        }
        if (firstName.getText().length() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Form Incomplete");
            return;
        }
        if (lastName.getText().length() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Form Incomplete");
            return;
        }
        if (insuranceName.getText().length() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Form Incomplete");
            return;
        }
        if (address.getText().length() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Form Incomplete");
            return;
        }
        if (telephoneNumber.getText().length() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Form Incomplete");
            return;
        }
        if (emergencyContact.getText().length() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Form Incomplete");
            return;
        }
        if (medicalBackground.getText().length() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Form Incomplete");
            return;
        }
        if (socialSecurityNumber.getText().length() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Form Incomplete");
            return;
        }
        if (eMailAddress.getText().length() == 0) {
            JOptionPane.showMessageDialog(rootPane, "Form Incomplete");
            return;
        }

        System.out.println("Done!!");
        Patient p = new Patient(firstName.getText(), lastName.getText(), insuranceName.getText(), insurancePolicy.getText(), coPay, address.getText(),
                telephoneNumber.getText(), emergencyContact.getText(), medicalBackground.getText(), socialSecurityNumber.getText(),
                married.isSelected() ? "yes" : "no", eMailAddress.getText(), male.isSelected() ? "male" : "female");

        data.addPatient(p);
        loadMedData.save(data);
        firstName.setText("");
        lastName.setText("");
        address.setText("");
        telephoneNumber.setText("");
        emergencyContact.setText("");
        eMailAddress.setText("");
        socialSecurityNumber.setText("");
        insuranceName.setText("");
        insurancePolicy.setText("");
        insuranceCoPay.setText("");
        medicalBackground.setText("");


    }//GEN-LAST:event_addPatientDoneActionPerformed

    private void addPatientCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPatientCancelActionPerformed
        // TODO add your handling code here:

        firstName.setText("");
        lastName.setText("");
        address.setText("");
        telephoneNumber.setText("");
        emergencyContact.setText("");
        eMailAddress.setText("");
        socialSecurityNumber.setText("");
        insuranceName.setText("");
        insurancePolicy.setText("");
        insuranceCoPay.setText("");
        medicalBackground.setText("");
    }//GEN-LAST:event_addPatientCancelActionPerformed

    private void searchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchFieldActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_searchFieldActionPerformed

    private void searchFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchFieldKeyTyped
        // TODO add your handling code here:
        searchResults.removeAll();
        if (searchField.getText().equals("")) {
            return;
        }
        currentPatientList = data.findPatientByName(searchField.getText());
        for (Patient p : currentPatientList) {
            searchResults.add(p.getFirstName() + " " + p.getLastName() + " " + p.getTelephoneNumber() + " " + p.getAddress());
        }

    }//GEN-LAST:event_searchFieldKeyTyped

    private void addAppointmentButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addAppointmentButtonActionPerformed
        // TODO add your handling code here:
        if (searchResults.getSelectedIndex() == -1) {
            return;
        }
        currentPatient = currentPatientList.get(searchResults.getSelectedIndex());
        appointmentDoctorList.removeAll();
        appointmentPatientName.setText(currentPatient.getFirstName() + " " + currentPatient.getLastName());
        for (String d : doctors) {
            appointmentDoctorList.add(d);
        }
        addAppointmentFrame.repaint();
        addAppointmentFrame.setVisible(true);


    }//GEN-LAST:event_addAppointmentButtonActionPerformed

    private void updateAccountButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateAccountButtonActionPerformed
        // TODO add your handling code here:
        if (searchResults.getSelectedIndex() == -1) {
            return;
        }
        currentPatient = currentPatientList.get(searchResults.getSelectedIndex());
        accountHoldersName.setText(currentPatient.getFirstName() + " " + currentPatient.getLastName());
        currentBalance.setText("$" + currentPatient.getBalance());
        amountInput.setText("" + currentPatient.getBalance());
        updateAccountFrame.setVisible(true);

    }//GEN-LAST:event_updateAccountButtonActionPerformed

    private void displayHistoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_displayHistoryButtonActionPerformed
        // TODO add your handling code here:
        if (searchResults.getSelectedIndex() == -1) {
            return;
        }
        currentPatient = currentPatientList.get(searchResults.getSelectedIndex());
        historyPatientName.setText(currentPatient.getFirstName() + " " + currentPatient.getLastName());
        currentVisitList = currentPatient.getVisits();
        for (Visit v : currentVisitList) {
            historyVisitList.add((v.getTime().get(Calendar.MONTH) + 1) + "/"
                    + v.getTime().get(Calendar.DAY_OF_MONTH) + "/"
                    + v.getTime().get(Calendar.YEAR) + " "
                    + (v.getTime().get(Calendar.HOUR_OF_DAY) * 100 + v.getTime().get(Calendar.MINUTE)));
        }
        displayHistoryFrame.setVisible(true);
    }//GEN-LAST:event_displayHistoryButtonActionPerformed

    private void modifyInfoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyInfoButtonActionPerformed
        // TODO add your handling code here:
        if (searchResults.getSelectedIndex() == -1) {
            return;
        }
        currentPatient = currentPatientList.get(searchResults.getSelectedIndex());
        ModifyPatientFrame.setVisible(true);
        if (currentPatient.getSex().equals("male")) {
            male1.setSelected(true);
        } else {
            female1.setSelected(true);
        }
        firstName1.setText(currentPatient.getFirstName());
        lastName1.setText(currentPatient.getLastName());
        address1.setText(currentPatient.getAddress());
        telephoneNumber1.setText(currentPatient.getTelephoneNumber());
        emergencyContact1.setText(currentPatient.getEmergencyContact());
        eMailAddress1.setText(currentPatient.getEMailAddress());
        socialSecurityNumber1.setText(currentPatient.getSocialSecurityNumber());
        if (currentPatient.getMaritalStatus().equals("yes")) {
            married1.setSelected(true);
        }
        insuranceName1.setText(currentPatient.getInsurance());
        insurancePolicy1.setText(currentPatient.getInsurancePolicy());
        insuranceCoPay1.setText("" + currentPatient.getCoPay());
        medicalBackground1.setText(currentPatient.getMedicalBackground());


    }//GEN-LAST:event_modifyInfoButtonActionPerformed

    private void male1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_male1ActionPerformed
        // TODO add your handling code here:
        if (female1.isSelected()) {
            female1.setSelected(false);
        }
        male1.setSelected(true);
    }//GEN-LAST:event_male1ActionPerformed

    private void female1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_female1ActionPerformed
        // TODO add your handling code here:
        if (male1.isSelected()) {
            male1.setSelected(false);
        }
        female1.setSelected(true);
    }//GEN-LAST:event_female1ActionPerformed

    private void married1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_married1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_married1ActionPerformed

    private void modifyPatientDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyPatientDoneActionPerformed
        // TODO add your handling code here:
        double coPay;

        try {
            coPay = Double.parseDouble(insuranceCoPay1.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(modifyPatientPanel1, "Invalid CoPay entry. Number required");

            return;
        }
        if (firstName1.getText().length() == 0) {
            JOptionPane.showMessageDialog(modifyPatientPanel1, "Form Incomplete");
            return;
        }
        if (lastName1.getText().length() == 0) {
            JOptionPane.showMessageDialog(modifyPatientPanel1, "Form Incomplete");
            return;
        }
        if (insuranceName1.getText().length() == 0) {
            JOptionPane.showMessageDialog(modifyPatientPanel1, "Form Incomplete");
            return;
        }
        if (address1.getText().length() == 0) {
            JOptionPane.showMessageDialog(modifyPatientPanel1, "Form Incomplete");
            return;
        }
        if (telephoneNumber1.getText().length() == 0) {
            JOptionPane.showMessageDialog(modifyPatientPanel1, "Form Incomplete");
            return;
        }
        if (emergencyContact1.getText().length() == 0) {
            JOptionPane.showMessageDialog(modifyPatientPanel1, "Form Incomplete");
            return;
        }
        if (medicalBackground1.getText().length() == 0) {
            JOptionPane.showMessageDialog(modifyPatientPanel1, "Form Incomplete");
            return;
        }
        if (socialSecurityNumber1.getText().length() == 0) {
            JOptionPane.showMessageDialog(modifyPatientPanel1, "Form Incomplete");
            return;
        }
        if (eMailAddress1.getText().length() == 0) {
            JOptionPane.showMessageDialog(modifyPatientPanel1, "Form Incomplete");
            return;
        }

        String oldFirstName = currentPatient.getFirstName();
        String oldLastName = currentPatient.getLastName();
        currentPatient.setCoPay(coPay);
        currentPatient.settFirstName(firstName1.getText());
        currentPatient.settLastName(lastName1.getText());
        currentPatient.setInsurance(insuranceName1.getText());
        currentPatient.setAddress(address1.getText());
        currentPatient.setTelephoneNumber(telephoneNumber1.getText());
        currentPatient.setEmergencyContact(emergencyContact1.getText());
        currentPatient.setMedicalBackground(medicalBackground1.getText());
        currentPatient.setSocialSecurityNumber(socialSecurityNumber1.getText());
        currentPatient.setEMailAddress(eMailAddress1.getText());

        data.updatePatientData(oldFirstName, oldLastName, currentPatient);
        loadMedData.save(data);
        ModifyPatientFrame.setVisible(false);

        firstName1.setText("");
        lastName1.setText("");
        address1.setText("");
        telephoneNumber1.setText("");
        emergencyContact1.setText("");
        eMailAddress1.setText("");
        socialSecurityNumber1.setText("");
        insuranceName1.setText("");
        insurancePolicy1.setText("");
        insuranceCoPay1.setText("");
        medicalBackground1.setText("");


    }//GEN-LAST:event_modifyPatientDoneActionPerformed

    private void modifyPatientCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modifyPatientCancelActionPerformed
        // TODO add your handling code here:
        ModifyPatientFrame.setVisible(false);
        firstName1.setText("");
        lastName1.setText("");
        address1.setText("");
        telephoneNumber1.setText("");
        emergencyContact1.setText("");
        eMailAddress1.setText("");
        socialSecurityNumber1.setText("");
        insuranceName1.setText("");
        insurancePolicy1.setText("");
        insuranceCoPay1.setText("");
        medicalBackground1.setText("");
    }//GEN-LAST:event_modifyPatientCancelActionPerformed

    private void searchResultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchResultsActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_searchResultsActionPerformed

    private void accountUpdateSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_accountUpdateSubmitActionPerformed
        // TODO add your handling code here:
        double payment = 0;
        try {
            payment = Double.parseDouble(amountInput.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(updateAccountFrame, "Invalid entry. Number required");
            return;
        }
        if (Double.compare(currentPatient.getBalance(), payment) < 0) {
            JOptionPane.showMessageDialog(updateAccountFrame, "Invalid amount, negative balance");
            return;
        }
        currentPatient.setBalance(currentPatient.getBalance() - payment);
        data.writePatientData(currentPatient);
        loadMedData.save(data);
        updateAccountFrame.setVisible(false);


    }//GEN-LAST:event_accountUpdateSubmitActionPerformed

    private void removeDoctorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeDoctorButtonActionPerformed
        // TODO add your handling code here:
        data.removeDoctor(doctorList.getSelectedItem());
        loadMedData.save(data);
        doctors = data.getDoctors();
        doctorList.removeAll();
        for (String d : doctors) {
            doctorList.add(d);
        }

    }//GEN-LAST:event_removeDoctorButtonActionPerformed

    private void addDoctorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDoctorButtonActionPerformed
        // TODO add your handling code here:
        if (!addDoctorField.equals("")) {
            data.addDoctor(addDoctorField.getText());
            loadMedData.save(data);
            addDoctorField.setText("");
            doctors = data.getDoctors();
            doctorList.removeAll();
            for (String d : doctors) {
                doctorList.add(d);
            }
        }
    }//GEN-LAST:event_addDoctorButtonActionPerformed

    private void dateChooserPanel1OnCommit(datechooser.events.CommitEvent evt) {//GEN-FIRST:event_dateChooserPanel1OnCommit
        // TODO add your handling code here:

    }//GEN-LAST:event_dateChooserPanel1OnCommit

    private void dateChooserPanel1OnSelectionChange(datechooser.events.SelectionChangedEvent evt) {//GEN-FIRST:event_dateChooserPanel1OnSelectionChange
        // TODO add your handling code here:
        availableTimesList.removeAll();
        unavailableTimes.clear();
        availableTimes.clear();
        currentAppointmentList = data.getAppointmentsForDay(dateChooserPanel1.getSelectedDate());
        for (Appointment a : currentAppointmentList) {
            unavailableTimes.add((a.getTime().get(Calendar.HOUR_OF_DAY) * 100) + a.getTime().get(Calendar.MINUTE));
            System.out.println((a.getTime().get(Calendar.HOUR_OF_DAY) * 100) + a.getTime().get(Calendar.MINUTE));
        }
        for (int i = 0, hour = 8, minute = 0; i < 41; i++) {
            Calendar t = Calendar.getInstance();
            t.set(dateChooserPanel1.getSelectedDate().get(Calendar.YEAR), dateChooserPanel1.getSelectedDate().get(Calendar.MONTH),
                    dateChooserPanel1.getSelectedDate().get(Calendar.DAY_OF_MONTH), hour, minute);

            if (!unavailableTimes.contains((t.get(Calendar.HOUR_OF_DAY) * 100) + t.get(Calendar.MINUTE))) {
                availableTimes.add(t);
            }
            minute += 15;
            if (minute == 60) {
                hour++;
                minute = 0;
            }
        }
        for (Calendar t : availableTimes) {
            availableTimesList.add(t.get(Calendar.HOUR_OF_DAY) + ":" + (t.get(Calendar.MINUTE) == 0 ? "00" : t.get(Calendar.MINUTE)));
        }
    }//GEN-LAST:event_dateChooserPanel1OnSelectionChange

    private void appointmentDoneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appointmentDoneButtonActionPerformed
        // TODO add your handling code here:
        if (reasonForVisitField.getText().equals("")) {
            JOptionPane.showMessageDialog(addAppointmentFrame, "Form Incomplete, Enter reason for visit");
            return;
        }
        if (appointmentDoctorList.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(addAppointmentFrame, "Form Incomplete, Select Doctor");
            return;
        }
        if (!modifyAppointment && availableTimesList.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(addAppointmentFrame, "Form Incomplete, Select Date and Time");
            return;
        }
        Calendar c = null;
        if (modifyAppointment && availableTimesList.getSelectedItem() == null) {
            c = data.getAppointmentsForDay(viewAppointmentCalendar.getSelectedDate()).get(viewAppointmentList.getSelectedIndex()).getTime();
        }
        if (modifyAppointment) {
            data.deleteAppointment(currentAppointment);
            Appointment a = new Appointment(currentPatient, appointmentDoctorList.getSelectedItem(),
                    reasonForVisitField.getText(), (c != null) ? c : availableTimes.get(availableTimesList.getSelectedIndex()));
            data.addAppointment(a);
            loadMedData.save(data);
            reasonForVisitField.setText("");
            appointmentDoctorList.removeAll();
            availableTimesList.removeAll();
            addAppointmentFrame.setVisible(false);
            modifyAppointment = false;
            return;
        }
        Appointment a = new Appointment(currentPatient, appointmentDoctorList.getSelectedItem(),
                reasonForVisitField.getText(), availableTimes.get(availableTimesList.getSelectedIndex()));
        data.addAppointment(a);
        loadMedData.save(data);
        reasonForVisitField.setText("");
        appointmentDoctorList.removeAll();
        availableTimesList.removeAll();
        addAppointmentFrame.setVisible(false);

    }//GEN-LAST:event_appointmentDoneButtonActionPerformed

    private void appointmentCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appointmentCancelButtonActionPerformed
        // TODO add your handling code here:
        reasonForVisitField.setText("");
        appointmentDoctorList.removeAll();
        availableTimesList.removeAll();
        addAppointmentFrame.setVisible(false);
    }//GEN-LAST:event_appointmentCancelButtonActionPerformed

    private void viewAppointmentCalendarOnSelectionChange(datechooser.events.SelectionChangedEvent evt) {//GEN-FIRST:event_viewAppointmentCalendarOnSelectionChange
        // TODO add your handling code here:
        viewAppointmentList.removeAll();
        for (Appointment a : data.getAppointmentsForDay(viewAppointmentCalendar.getSelectedDate())) {
            viewAppointmentList.add(a.getPatientName() + " "
                    + a.getTime().get(Calendar.HOUR_OF_DAY) + ":" + (a.getTime().get(Calendar.MINUTE) == 0 ? "00" : a.getTime().get(Calendar.MINUTE)));
        }
    }//GEN-LAST:event_viewAppointmentCalendarOnSelectionChange

    private void viewAppointmentListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewAppointmentListActionPerformed
        // TODO add your handling code here:

        viewAppointmentName.setText("Name: "
                + data.getAppointmentsForDay(viewAppointmentCalendar.getSelectedDate()).get(viewAppointmentList.getSelectedIndex()).getPatientName());
        viewAppointmentContact.setText("Contact: "
                + data.getAppointmentsForDay(viewAppointmentCalendar.getSelectedDate()).get(viewAppointmentList.getSelectedIndex()).getContact());
        viewAppointmentDoctor.setText("Doctor: "
                + data.getAppointmentsForDay(viewAppointmentCalendar.getSelectedDate()).get(viewAppointmentList.getSelectedIndex()).getDoctor());
        viewAppointmentReason.setText("Reason: "
                + data.getAppointmentsForDay(viewAppointmentCalendar.getSelectedDate()).get(viewAppointmentList.getSelectedIndex()).getReasonForVisit());
        jPanel1.repaint();

    }//GEN-LAST:event_viewAppointmentListActionPerformed

    private void jTabbedPane1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTabbedPane1FocusLost
        // TODO add your handling code here:


    }//GEN-LAST:event_jTabbedPane1FocusLost

    private void jTabbedPane1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTabbedPane1FocusGained
        // TODO add your handling code here:

    }//GEN-LAST:event_jTabbedPane1FocusGained

    private void findAppointmentNameFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_findAppointmentNameFieldKeyTyped
        // TODO add your handling code here:
        findAppointmentResultList.removeAll();
        currentAppointmentList.clear();
        if (findAppointmentNameField.getText().equals("")) {
            return;
        }
        currentPatientList = data.findPatientByName(findAppointmentNameField.getText());
        for (Patient p : currentPatientList) {
            currentAppointmentList.addAll(data.getAppointmentByPatientID(p.getPatientID()));

        }

        for (Appointment a : currentAppointmentList) {
            findAppointmentResultList.add(a.getPatientName() + " " + (a.getTime().get(Calendar.MONTH) + 1) + "/"
                    + a.getTime().get(Calendar.DAY_OF_MONTH) + "/" + a.getTime().get(Calendar.YEAR) + " "
                    + (a.getTime().get(Calendar.HOUR_OF_DAY) * 100 + a.getTime().get(Calendar.MINUTE)));
        }
    }//GEN-LAST:event_findAppointmentNameFieldKeyTyped

    private void findAppointmentResultListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findAppointmentResultListActionPerformed
        // TODO add your handling code here:
        findAppointmentName.setText("Name: "
                + currentAppointmentList.get(findAppointmentResultList.getSelectedIndex()).getPatientName());
        findAppointmentContact.setText("Contact: "
                + currentAppointmentList.get(findAppointmentResultList.getSelectedIndex()).getContact());
        findAppointmentDateTime.setText("Date/Time: "
                + (currentAppointmentList.get(findAppointmentResultList.getSelectedIndex()).getTime().get(Calendar.MONTH) + 1) + "/"
                + currentAppointmentList.get(findAppointmentResultList.getSelectedIndex()).getTime().get(Calendar.DAY_OF_MONTH) + "/"
                + currentAppointmentList.get(findAppointmentResultList.getSelectedIndex()).getTime().get(Calendar.YEAR) + " "
                + (currentAppointmentList.get(findAppointmentResultList.getSelectedIndex()).getTime().get(Calendar.HOUR_OF_DAY) * 100
                + currentAppointmentList.get(findAppointmentResultList.getSelectedIndex()).getTime().get(Calendar.MINUTE)));
        viewAppointmentDoctor1.setText("Doctor: "
                + currentAppointmentList.get(findAppointmentResultList.getSelectedIndex()).getDoctor());
        viewAppointmentReason1.setText("Reason: "
                + currentAppointmentList.get(findAppointmentResultList.getSelectedIndex()).getReasonForVisit());


    }//GEN-LAST:event_findAppointmentResultListActionPerformed

    private void jPanel1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPanel1FocusGained
        // TODO add your handling code here:
    }//GEN-LAST:event_jPanel1FocusGained

    private void viewAppointmentsDelteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewAppointmentsDelteButtonActionPerformed
        // TODO add your handling code here:
        if (viewAppointmentList.getSelectedIndex() == -1
                || data.getAppointmentsForDay(viewAppointmentCalendar.getSelectedDate()).get(viewAppointmentList.getSelectedIndex()) == null) {
            return;
        }
        data.deleteAppointment(data.getAppointmentsForDay(viewAppointmentCalendar.getSelectedDate()).get(viewAppointmentList.getSelectedIndex()));
        loadMedData.save(data);
        viewAppointmentList.removeAll();
        for (Appointment a : data.getAppointmentsForDay(viewAppointmentCalendar.getSelectedDate())) {
            viewAppointmentList.add(a.getPatientName() + " "
                    + a.getTime().get(Calendar.HOUR_OF_DAY) + ":" + (a.getTime().get(Calendar.MINUTE) == 0 ? "00" : a.getTime().get(Calendar.MINUTE)));
        }
        viewAppointmentName.setText("Name: ");
        viewAppointmentContact.setText("Contact: ");
        viewAppointmentDoctor.setText("Doctor: ");
        viewAppointmentReason.setText("Reason: ");
        jPanel1.repaint();
    }//GEN-LAST:event_viewAppointmentsDelteButtonActionPerformed

    private void viewAppointmentsModifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewAppointmentsModifyButtonActionPerformed
        // TODO add your handling code here:
        if (findAppointmentResultList.getSelectedIndex() == -1
                || currentAppointmentList.get(findAppointmentResultList.getSelectedIndex()) == null) {
            return;
        }
        modifyAppointment = true;
        currentAppointment = data.getAppointmentsForDay(viewAppointmentCalendar.getSelectedDate()).get(viewAppointmentList.getSelectedIndex());
        currentPatient = data.getPatientByID(data.getAppointmentsForDay(viewAppointmentCalendar.getSelectedDate()).get(viewAppointmentList.getSelectedIndex()).getPatientID());
        appointmentDoctorList.removeAll();
        appointmentPatientName.setText(currentPatient.getFirstName() + " " + currentPatient.getLastName());
        int selectedDoctor = 0;
        for (int i = 0; i < doctors.size(); i++) {
            appointmentDoctorList.add(doctors.get(i));
            if (doctors.get(i).equals(data.getAppointmentsForDay(viewAppointmentCalendar.getSelectedDate()).get(viewAppointmentList.getSelectedIndex()).getDoctor())) {
                selectedDoctor = i;
            }
        }
        reasonForVisitField.setText(data.getAppointmentsForDay(viewAppointmentCalendar.getSelectedDate()).get(viewAppointmentList.getSelectedIndex()).getReasonForVisit());
        addAppointmentFrame.repaint();
        addAppointmentFrame.setVisible(true);
        dateChooserPanel1.setSelectedDate(viewAppointmentCalendar.getSelectedDate());
        appointmentDoctorList.select(selectedDoctor);

    }//GEN-LAST:event_viewAppointmentsModifyButtonActionPerformed

    private void findAppointmentDeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findAppointmentDeleteButtonActionPerformed
        // TODO add your handling code here:
        if (findAppointmentResultList.getSelectedIndex() == -1
                || currentAppointmentList.get(findAppointmentResultList.getSelectedIndex()) == null) {
            return;
        }
        data.deleteAppointment(currentAppointmentList.get(findAppointmentResultList.getSelectedIndex()));
        loadMedData.save(data);
        findAppointmentName.setText("Name: ");
        findAppointmentContact.setText("Contact: ");
        findAppointmentDateTime.setText("Date/Time: ");
        viewAppointmentDoctor1.setText("Doctor: ");
        viewAppointmentReason1.setText("Reason: ");
        findAppointmentResultList.removeAll();
        currentAppointmentList.clear();
        if (findAppointmentNameField.getText().equals("")) {
            return;
        }
        currentPatientList = data.findPatientByName(findAppointmentNameField.getText());
        for (Patient p : currentPatientList) {
            currentAppointmentList.addAll(data.getAppointmentByPatientID(p.getPatientID()));
        }
        for (Appointment a : currentAppointmentList) {
            findAppointmentResultList.add(a.getPatientName() + " " + (a.getTime().get(Calendar.MONTH) + 1) + "/"
                    + a.getTime().get(Calendar.DAY_OF_MONTH) + "/" + a.getTime().get(Calendar.YEAR) + " "
                    + (a.getTime().get(Calendar.HOUR_OF_DAY) * 100 + a.getTime().get(Calendar.MINUTE)));
        }
    }//GEN-LAST:event_findAppointmentDeleteButtonActionPerformed

    private void findAppointmentModifyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findAppointmentModifyButtonActionPerformed
        // TODO add your handling code here:
        if (findAppointmentResultList.getSelectedIndex() == -1
                || currentAppointmentList.get(findAppointmentResultList.getSelectedIndex()) == null) {
            return;
        }
        modifyAppointment = true;
        currentAppointment = currentAppointmentList.get(findAppointmentResultList.getSelectedIndex());
        currentPatient = data.getPatientByID(currentAppointmentList.get(findAppointmentResultList.getSelectedIndex()).getPatientID());
        appointmentDoctorList.removeAll();
        appointmentPatientName.setText(currentPatient.getFirstName() + " " + currentPatient.getLastName());
        int selectedDoctor = 0;
        for (int i = 0; i < doctors.size(); i++) {
            appointmentDoctorList.add(doctors.get(i));
            if (doctors.get(i).equals(currentAppointmentList.get(findAppointmentResultList.getSelectedIndex()).getDoctor())) {
                selectedDoctor = i;
            }
        }
        reasonForVisitField.setText(currentAppointmentList.get(findAppointmentResultList.getSelectedIndex()).getReasonForVisit());
        addAppointmentFrame.repaint();
        dateChooserPanel1.setSelectedDate(currentAppointmentList.get(findAppointmentResultList.getSelectedIndex()).getTime());
        appointmentDoctorList.select(selectedDoctor);
        addAppointmentFrame.setVisible(true);

    }//GEN-LAST:event_findAppointmentModifyButtonActionPerformed

    private void jPanel4FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPanel4FocusGained
        // TODO add your handling code here:

    }//GEN-LAST:event_jPanel4FocusGained

    private void jTabbedPane1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPane1MouseClicked
        // TODO add your handling code here:
        updateTodaysAppointments();

    }//GEN-LAST:event_jTabbedPane1MouseClicked

    private void jTabbedPane1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jTabbedPane1StateChanged
        // TODO add your handling code here:

    }//GEN-LAST:event_jTabbedPane1StateChanged

    private void todaysAppointmentListFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_todaysAppointmentListFocusGained
        // TODO add your handling code here:

    }//GEN-LAST:event_todaysAppointmentListFocusGained

    private void checkInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkInButtonActionPerformed
        // TODO add your handling code here:
        if (todaysAppointmentList.getSelectedIndex() == -1) {
            return;
        }
        Appointment a = data.getAppointmentsForDay(Calendar.getInstance()).get(todaysAppointmentList.getSelectedIndex());
        Patient p = data.getPatientByID(data.getAppointmentsForDay(Calendar.getInstance()).get(todaysAppointmentList.getSelectedIndex()).getPatientID());
        Visit v = new Visit(p, a.getTime(), a.getReasonForVisit(), a.getDoctor());
        data.checkIn(v);
        data.deleteAppointment(a);
        loadMedData.save(data);
        updateTodaysAppointments();
    }//GEN-LAST:event_checkInButtonActionPerformed

    private void inProgressListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inProgressListActionPerformed
        // TODO add your handling code here:
        if (inProgressList.getSelectedIndex() == -1) {
            return;
        }
        checkOutPatientLabel.setText("Patient: " + data.getCheckedIn().get(inProgressList.getSelectedIndex()).getPatientName());
    }//GEN-LAST:event_inProgressListActionPerformed

    private void checkOutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkOutButtonActionPerformed
        // TODO add your handling code here:
        if (inProgressList.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(rootPane, "Patient not selected");
            return;
        }
        if (diagnosisTextField.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Form Incomplete, Enter Diagnosis");
            return;
        }
        if (recommendationTextField.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Form Incomplete, Enter Recommendation");
            return;
        }
        if (costTextField.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Form Incomplete, Enter Cost");
            return;
        }
        double cost = -1;
        try {
            cost = Double.parseDouble(costTextField.getText());
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(rootPane, "Invalid cost entry");
            return;
        }
        Visit v = data.getCheckedIn().get(inProgressList.getSelectedIndex());
        data.checkOut(v);
        Patient p = data.getPatientByID(v.getPatientID());
        v.setCause(diagnosisTextField.getText());
        v.setCorrection(recommendationTextField.getText());
        v.setCost(cost);
        v.setCoPay(p.getCoPay());
        if (cost > p.getCoPay()) {
            p.setBalance(p.getBalance() + p.getCoPay());
        } else {
            p.setBalance(p.getBalance() + cost);
        }
        p.addVisit(v);
        currentPatient = p;
        accountHoldersName.setText(currentPatient.getFirstName() + " " + currentPatient.getLastName());
        currentBalance.setText("$" + currentPatient.getBalance());
        amountInput.setText("" + currentPatient.getBalance());
        updateAccountFrame.setVisible(true);
        diagnosisTextField.setText("");
        recommendationTextField.setText("");
        costTextField.setText("");
        updateTodaysAppointments();

    }//GEN-LAST:event_checkOutButtonActionPerformed

    private void walkInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_walkInButtonActionPerformed
        // TODO add your handling code here:
        if (searchResults.getSelectedIndex() == -1) {
            return;
        }
        currentPatient = currentPatientList.get(searchResults.getSelectedIndex());
        walkInReasonForVisitTextField.setText("");
        walkInDoctorList.removeAll();
        for (String d : doctors) {
            walkInDoctorList.add(d);
        }
        walkInFrame.setVisible(true);
    }//GEN-LAST:event_walkInButtonActionPerformed

    private void walkInCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_walkInCancelButtonActionPerformed
        // TODO add your handling code here:
        walkInReasonForVisitTextField.setText("");
        walkInDoctorList.removeAll();
        walkInFrame.setVisible(false);
    }//GEN-LAST:event_walkInCancelButtonActionPerformed

    private void walkInCheckInButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_walkInCheckInButtonActionPerformed
        // TODO add your handling code here:
        if (walkInReasonForVisitTextField.getText().equals("")) {
            JOptionPane.showMessageDialog(walkInFrame, "Form Incomplete, Enter Reason For Visit");
            return;
        }
        if (walkInDoctorList.getSelectedItem() == null) {
            JOptionPane.showMessageDialog(walkInFrame, "Form Incomplete, Select Doctor");
            return;
        }
        Visit v = new Visit(currentPatient, Calendar.getInstance(), walkInReasonForVisitTextField.getText(), walkInDoctorList.getSelectedItem());
        data.checkIn(v);
        loadMedData.save(data);
        walkInReasonForVisitTextField.setText("");
        walkInDoctorList.removeAll();
        walkInFrame.setVisible(false);
    }//GEN-LAST:event_walkInCheckInButtonActionPerformed

    private void todaysAppointmentListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_todaysAppointmentListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_todaysAppointmentListActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Home.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Home.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Home.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Home.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
//        MedData data = loadMedData.get();
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Home().setVisible(true);

            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFrame ModifyPatientFrame;
    private javax.swing.JLabel accountHoldersName;
    private javax.swing.JButton accountUpdateSubmit;
    private javax.swing.JButton addAppointmentButton;
    private javax.swing.JFrame addAppointmentFrame;
    private javax.swing.JButton addDoctorButton;
    private javax.swing.JTextField addDoctorField;
    private javax.swing.JButton addPatientCancel;
    private javax.swing.JButton addPatientDone;
    private javax.swing.JPanel addPatientPanel;
    private javax.swing.JTextField address;
    private javax.swing.JTextField address1;
    private javax.swing.JTextField amountInput;
    private javax.swing.JButton appointmentCancelButton;
    private java.awt.List appointmentDoctorList;
    private javax.swing.JButton appointmentDoneButton;
    private javax.swing.JLabel appointmentPatientName;
    private java.awt.List availableTimesList;
    private javax.swing.JButton checkInButton;
    private javax.swing.JToggleButton checkOutButton;
    private javax.swing.JLabel checkOutPatientLabel;
    private javax.swing.JTextField costTextField;
    private javax.swing.JLabel currentBalance;
    private datechooser.beans.DateChooserPanel dateChooserPanel1;
    private javax.swing.JTextArea diagnosisTextField;
    private javax.swing.JButton displayHistoryButton;
    private javax.swing.JFrame displayHistoryFrame;
    private java.awt.List doctorList;
    private javax.swing.JTextField eMailAddress;
    private javax.swing.JTextField eMailAddress1;
    private javax.swing.JTextField emergencyContact;
    private javax.swing.JTextField emergencyContact1;
    private javax.swing.JCheckBox female;
    private javax.swing.JCheckBox female1;
    private javax.swing.JLabel findAppointmentContact;
    private javax.swing.JLabel findAppointmentDateTime;
    private javax.swing.JToggleButton findAppointmentDeleteButton;
    private javax.swing.JToggleButton findAppointmentModifyButton;
    private javax.swing.JLabel findAppointmentName;
    private javax.swing.JTextField findAppointmentNameField;
    private java.awt.List findAppointmentResultList;
    private javax.swing.JTextField firstName;
    private javax.swing.JTextField firstName1;
    private javax.swing.JButton historyDisplayButton;
    private javax.swing.JButton historyDoneButton;
    private javax.swing.JLabel historyPatientName;
    private java.awt.List historyVisitList;
    private java.awt.List inProgressList;
    private javax.swing.JTextField insuranceCoPay;
    private javax.swing.JTextField insuranceCoPay1;
    private javax.swing.JTextField insuranceName;
    private javax.swing.JTextField insuranceName1;
    private javax.swing.JTextField insurancePolicy;
    private javax.swing.JTextField insurancePolicy1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel41;
    private javax.swing.JLabel jLabel42;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField lastName;
    private javax.swing.JTextField lastName1;
    private javax.swing.JCheckBox male;
    private javax.swing.JCheckBox male1;
    private javax.swing.JCheckBox married;
    private javax.swing.JCheckBox married1;
    private javax.swing.JTextArea medicalBackground;
    private javax.swing.JTextArea medicalBackground1;
    private javax.swing.JButton modifyInfoButton;
    private javax.swing.JButton modifyPatientCancel;
    private javax.swing.JButton modifyPatientDone;
    private javax.swing.JPanel modifyPatientInfo;
    private javax.swing.JPanel modifyPatientPanel1;
    private javax.swing.JTextField reasonForVisitField;
    private javax.swing.JTextArea recommendationTextField;
    private javax.swing.JButton removeDoctorButton;
    private javax.swing.JTextField searchField;
    private java.awt.List searchResults;
    private javax.swing.JTextField socialSecurityNumber;
    private javax.swing.JTextField socialSecurityNumber1;
    private javax.swing.JTextField telephoneNumber;
    private javax.swing.JTextField telephoneNumber1;
    private java.awt.List todaysAppointmentList;
    private javax.swing.JButton updateAccountButton;
    private javax.swing.JFrame updateAccountFrame;
    private datechooser.beans.DateChooserPanel viewAppointmentCalendar;
    private javax.swing.JLabel viewAppointmentContact;
    private javax.swing.JLabel viewAppointmentDoctor;
    private javax.swing.JLabel viewAppointmentDoctor1;
    private java.awt.List viewAppointmentList;
    private javax.swing.JLabel viewAppointmentName;
    private javax.swing.JLabel viewAppointmentReason;
    private javax.swing.JLabel viewAppointmentReason1;
    private javax.swing.JToggleButton viewAppointmentsDelteButton;
    private javax.swing.JToggleButton viewAppointmentsModifyButton;
    private javax.swing.JButton walkInButton;
    private javax.swing.JButton walkInCancelButton;
    private javax.swing.JButton walkInCheckInButton;
    private java.awt.List walkInDoctorList;
    private javax.swing.JFrame walkInFrame;
    private javax.swing.JTextField walkInReasonForVisitTextField;
    // End of variables declaration//GEN-END:variables
}
